{"version":3,"file":"static/js/602.a767f213.chunk.js","mappings":"yRAuDA,EAhDe,WAAO,IAAD,EACnB,GAAkCA,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAY,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAElDC,EAAAA,EAAAA,YAAU,WACR,IAAMT,EAAU,mCAAG,wFACbK,EAAaG,IAAI,SADJ,iCAEQE,EAAAA,EAAAA,IAAgBL,EAAaG,IAAI,UAFzC,cAETG,EAFS,yBAGRV,GAAc,OAAIU,EAASC,KAAKC,WAHxB,2CAAH,qDAOhBb,GACD,GAAE,IAEH,IAAMc,EAAgB,mCAAG,2FACvBf,GAAa,GADU,UAEAW,EAAAA,EAAAA,IAAgBL,EAAaG,IAAI,UAFjC,OAEjBG,EAFiB,OAGvBV,GAAc,OAAIU,EAASC,KAAKC,UAChCd,GAAa,GAJU,2CAAH,qDAYtB,OACE,gCACE,SAAC,KAAD,CACEgB,OAAQD,EACRE,SAToB,SAAAC,GAExBX,EAD6B,KAAVW,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,EAOKC,MAAOX,IAERT,GACC,gBAAKqB,UAAU,sBAAf,UACE,SAAC,KAAD,OAGF,SAAC,KAAD,CAAYnB,WAAYA,EAAYoB,KAAMlB,MAIjD,C,iNClDKmB,EAAU,2CACVC,EAAW,gCAEJC,EAAW,mCAAG,2FACrBZ,EAAW,GADU,kBAINa,EAAAA,EAAAA,IAAA,UACZF,EADY,2CAC+BD,IALzB,OAIvBV,EAJuB,uDAQvBc,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MATuB,iCAYlBhB,GAZkB,yDAAH,qDAeXiB,EAAe,mCAAG,WAAMC,GAAN,8EACzBlB,EAAW,GADc,kBAIVa,EAAAA,EAAAA,IAAA,UACZF,EADY,iBACKO,EADL,2BAC0BR,IALhB,OAI3BV,EAJ2B,uDAQ3Bc,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MAT2B,iCAYtBhB,GAZsB,yDAAH,sDAefD,EAAe,mCAAG,WAAMoB,GAAN,8EACzBnB,EAAW,GADc,kBAIVa,EAAAA,EAAAA,IAAA,UACZF,EADY,8BACkBQ,EADlB,sDACqET,IAL3D,OAI3BV,EAJ2B,uDAQ3Bc,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MAT2B,iCAYtBhB,GAZsB,yDAAH,sDAefoB,EAAO,mCAAG,WAAMF,GAAN,8EACjBlB,EAAW,GADM,kBAIFa,EAAAA,EAAAA,IAAA,UACZF,EADY,iBACKO,EADL,mCACkCR,IALhC,OAInBV,EAJmB,uDAQnBc,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MATmB,iCAYdhB,GAZc,yDAAH,sDAcPqB,EAAU,mCAAG,WAAMH,GAAN,8EACpBlB,EAAW,GADS,kBAILa,EAAAA,EAAAA,IAAA,UACZF,EADY,iBACKO,EADL,0CACyCR,IALpC,OAItBV,EAJsB,uDAQtBc,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MATsB,iCAYjBhB,GAZiB,yDAAH,qD","sources":["pages/Movies/Movies.jsx","services/Api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './Movies.scss';\nimport { SearchMovie, MoviesList } from 'components';\nimport { getSearchMovies } from 'services/Api';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components';\n\nconst Movies = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [moviesList, setMoviesList] = useState([]);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchMovies = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    const moviesList = async () => {\n      if (searchParams.get('query')) {\n        const response = await getSearchMovies(searchParams.get('query'));\n        return setMoviesList([...response.data.results]);\n      }\n    };\n\n    moviesList(); // eslint-disable-next-line\n  }, []);\n\n  const fetchSearchMovie = async () => {\n    setIsLoading(true);\n    const response = await getSearchMovies(searchParams.get('query'));\n    setMoviesList([...response.data.results]);\n    setIsLoading(false);\n  };\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <section>\n      <SearchMovie\n        search={fetchSearchMovie}\n        onChange={updateQueryString}\n        value={searchMovies}\n      />\n      {isLoading ? (\n        <div className=\"backdrop-for-loader\">\n          <Loader />\n        </div>\n      ) : (\n        <MoviesList moviesList={moviesList} from={location} />\n      )}\n    </section>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nconst API_KEY = 'api_key=069f0096f83b6d4377da260a7888cd6d';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const getTranding = async () => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}trending/all/day?language=en-US&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\n\nexport const getMovieDetails = async id => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}movie/${id}?language=en-US&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\n\nexport const getSearchMovies = async movie => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}search/movie?query=${movie}&include_adult=false&language=en-US&page=1&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\n\nexport const getCast = async id => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}movie/${id}/credits?language=en-US&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\nexport const getReviews = async id => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?language=en-US&page=1&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\n"],"names":["useState","isLoading","setIsLoading","moviesList","setMoviesList","location","useLocation","useSearchParams","searchParams","setSearchParams","searchMovies","get","useEffect","getSearchMovies","response","data","results","fetchSearchMovie","search","onChange","query","value","className","from","API_KEY","BASE_URL","getTranding","axios","Notiflix","console","log","getMovieDetails","id","movie","getCast","getReviews"],"sourceRoot":""}