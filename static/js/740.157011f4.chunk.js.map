{"version":3,"file":"static/js/740.157011f4.chunk.js","mappings":"wQAqCA,EAhCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAYR,OAVAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,qGACIC,EAAAA,EAAAA,IAAWJ,GADf,cACbK,EADa,yBAGZN,GAAW,OAAIM,EAASC,KAAKC,WAHjB,2CAAH,qDAMlBJ,GACD,GAAE,KAGD,8BACGL,EAAQU,QACP,eAAIC,UAAU,UAAd,SACGX,EAAQY,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,wBAAKD,KACL,uBAAIC,MAFGZ,EADE,OAQf,wBAAI,sCAIX,C,iNChCKa,EAAU,2CACVC,EAAW,gCAEJC,EAAW,mCAAG,2FACrBV,EAAW,GADU,kBAINW,EAAAA,EAAAA,IAAA,UACZF,EADY,2CAC+BD,IALzB,OAIvBR,EAJuB,uDAQvBY,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MATuB,iCAYlBd,GAZkB,yDAAH,qDAeXe,EAAe,mCAAG,WAAMpB,GAAN,8EACzBK,EAAW,GADc,kBAIVW,EAAAA,EAAAA,IAAA,UACZF,EADY,iBACKd,EADL,2BAC0Ba,IALhB,OAI3BR,EAJ2B,uDAQ3BY,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MAT2B,iCAYtBd,GAZsB,yDAAH,sDAefgB,EAAe,mCAAG,WAAMC,GAAN,8EACzBjB,EAAW,GADc,kBAIVW,EAAAA,EAAAA,IAAA,UACZF,EADY,8BACkBQ,EADlB,sDACqET,IAL3D,OAI3BR,EAJ2B,uDAQ3BY,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MAT2B,iCAYtBd,GAZsB,yDAAH,sDAefkB,EAAO,mCAAG,WAAMvB,GAAN,8EACjBK,EAAW,GADM,kBAIFW,EAAAA,EAAAA,IAAA,UACZF,EADY,iBACKd,EADL,mCACkCa,IALhC,OAInBR,EAJmB,uDAQnBY,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MATmB,iCAYdd,GAZc,yDAAH,sDAcPD,EAAU,mCAAG,WAAMJ,GAAN,8EACpBK,EAAW,GADS,kBAILW,EAAAA,EAAAA,IAAA,UACZF,EADY,iBACKd,EADL,0CACyCa,IALpC,OAItBR,EAJsB,uDAQtBY,IAAAA,OAAAA,QAAwB,iDACxBC,QAAQC,IAAR,MATsB,iCAYjBd,GAZiB,yDAAH,qD","sources":["components/Reviews/Reviews.jsx","services/Api.js"],"sourcesContent":["import { getReviews } from 'services/Api';\nimport { useParams } from 'react-router-dom';\nimport './Reviews.scss';\nimport { useEffect, useState } from 'react';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      const response = await getReviews(id);\n\n      return setReviews([...response.data.results]);\n    };\n\n    fetchReviews(); // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      {reviews.length ? (\n        <ul className=\"reviews\">\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <h3>Sorry, we have no reviews yet...</h3>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nconst API_KEY = 'api_key=069f0096f83b6d4377da260a7888cd6d';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const getTranding = async () => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}trending/all/day?language=en-US&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\n\nexport const getMovieDetails = async id => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}movie/${id}?language=en-US&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\n\nexport const getSearchMovies = async movie => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}search/movie?query=${movie}&include_adult=false&language=en-US&page=1&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\n\nexport const getCast = async id => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}movie/${id}/credits?language=en-US&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\nexport const getReviews = async id => {\n  let response = '';\n\n  try {\n    response = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?language=en-US&page=1&${API_KEY}`\n    );\n  } catch (error) {\n    Notiflix.Notify.failure(\"Oops... Something's wron... try again later:)\");\n    console.log(error);\n  }\n\n  return response;\n};\n"],"names":["useState","reviews","setReviews","id","useParams","useEffect","fetchReviews","getReviews","response","data","results","length","className","map","author","content","API_KEY","BASE_URL","getTranding","axios","Notiflix","console","log","getMovieDetails","getSearchMovies","movie","getCast"],"sourceRoot":""}